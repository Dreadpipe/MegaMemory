{"version":3,"sources":["images sync /^/.*$","images/Airman.png","images/Bubbleman.png","images/Crashman.png","images/Flashman.png","images/Heatman.png","images/Light.png","images/Megaman.png","images/Metalman.jpg","images/Protoman.png","images/Quickman.jpg","images/Roll.png","images/Wily.png","images/Woodman.jpg","components/Header/Header.js","components/NavBar/NavBar.js","components/RobotCard/RobotCard.js","components/Footer/Footer.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["map","./Airman.png","./Bubbleman.png","./Crashman.png","./Flashman.png","./Heatman.png","./Light.png","./Megaman.png","./Metalman.jpg","./Protoman.png","./Quickman.jpg","./Roll.png","./Wily.png","./Woodman.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","p","Header","props","react_default","a","createElement","className","children","NavBar","href","score","topScore","RobotCard","key","onClick","handleClick","alt","name","src","require","concat","Footer","Main","state","robots","clicked","clickedArray","_this","shuffledArray","sort","robot","Math","random","setState","includes","push","this","_this2","NavBar_NavBar","Header_Header","RobotCard_RobotCard","Footer_Footer","Component","App","components_Main_Main","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a83d5291.chunk.js","sourcesContent":["var map = {\n\t\"./Airman.png\": 22,\n\t\"./Bubbleman.png\": 23,\n\t\"./Crashman.png\": 24,\n\t\"./Flashman.png\": 25,\n\t\"./Heatman.png\": 26,\n\t\"./Light.png\": 27,\n\t\"./Megaman.png\": 28,\n\t\"./Metalman.jpg\": 29,\n\t\"./Protoman.png\": 30,\n\t\"./Quickman.jpg\": 31,\n\t\"./Roll.png\": 32,\n\t\"./Wily.png\": 33,\n\t\"./Woodman.jpg\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/Airman.377ea704.png\";","module.exports = __webpack_public_path__ + \"static/media/Bubbleman.1f84e773.png\";","module.exports = __webpack_public_path__ + \"static/media/Crashman.095d1def.png\";","module.exports = __webpack_public_path__ + \"static/media/Flashman.5e7ce27e.png\";","module.exports = __webpack_public_path__ + \"static/media/Heatman.5607d19a.png\";","module.exports = __webpack_public_path__ + \"static/media/Light.6dde7cd4.png\";","module.exports = __webpack_public_path__ + \"static/media/Megaman.a42524cc.png\";","module.exports = __webpack_public_path__ + \"static/media/Metalman.db74ae9b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Protoman.69834465.png\";","module.exports = __webpack_public_path__ + \"static/media/Quickman.1f45bd4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Roll.1cd694e6.png\";","module.exports = __webpack_public_path__ + \"static/media/Wily.b6905d1b.png\";","module.exports = __webpack_public_path__ + \"static/media/Woodman.b1688116.jpg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This will hold the NavBar and the welcome banner\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <h1 className=\"header\">{props.children}</h1>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <ul>\r\n                <li>\r\n                    <a href=\"/\">\r\n                    reset!\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    Click an image to begin!\r\n                </li>\r\n                <li>\r\n                    Score: {props.score} | Top Score: {props.topScore}\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//some pseudocode to get us started\r\n\r\n// {require(`../../images/${props.image})\r\n\r\nfunction RobotCard(props) {\r\n    return ( \r\n        <div className=\"card\">\r\n            <div \r\n                className=\"img-container\"\r\n                key={props.id}\r\n                id={props.id}\r\n                onClick={() => props.handleClick(props.id)}>\r\n                    <img className=\"click-item\" alt={props.name} src={require(`../../images/${props.src}`)}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RobotCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This will hold a return link to refresh the game, or to go to my portfolio\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"bottom\">\r\n                <a href=\"https://dreadpipe.github.io/v2portfolio/index.html\">Ben Harris Portfolio</a>\r\n            </div>\r\n        </footer>\r\n\r\n    )\r\n};\r\n\r\nexport default Footer;\r\n\r\n\r\n\r\n\r\n// {/* <footer>    */}\r\n//      {/* <h1>Believe in yourself!</h1>\r\n// </footer> */}","import robots from \"../../robotcard.json\";\r\nimport React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport Header from \"../Header/Header\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport RobotCard from \"../RobotCard/RobotCard\";\r\nimport Footer from \"../Footer/Footer\";\r\n// robotcards.json goes here, as state will be located here\r\n// This will hold a container that will hold the RobotCards, and append as a list\r\n// js goes here that handles card distribution\r\n\r\n// global varialbes here, like score\r\n\r\nclass Main extends Component {\r\n\r\n    state ={\r\n        robots: robots,\r\n        score: 0,\r\n        topScore: 0,\r\n        clicked: [],\r\n        \r\n    };\r\n\r\n//need to \r\n// 1) shuffle when clicked\r\n// 2) update array when shuffled\r\n// 3) reset score when matching id is clicked\r\n// 4) increase score by 1 when non-id is clicked\r\n\r\n\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        const shuffledArray = this.state.robots.sort(robot => Math.random() -0.5);\r\n        this.setState({ robots: shuffledArray });\r\n    };\r\n\r\n\r\n    handleClick = id => {\r\n        let clickedArray = this.state.clicked;\r\n        const shuffledArray = this.state.robots.sort(robot => Math.random(robot) -0.5);\r\n        this.setState({ robots: shuffledArray });\r\n            if (clickedArray.includes(id)) {\r\n                this.setState({ score: 0, clicked: [] });\r\n                return clickedArray;\r\n            } else {\r\n                this.setState({ score: this.state.score + 1 })\r\n                clickedArray.push(id);\r\n                if (this.state.score === this.state.topScore) {\r\n                    this.setState({ topScore: this.state.score + 1 });\r\n                }\r\n                return clickedArray;\r\n            }\r\n    }\r\n\r\n\r\n\r\n    // renders to virtual DOM\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar \r\n                    score={this.state.score}\r\n                    topScore={this.state.topScore}\r\n                />\r\n                <Header>\r\n                        Play the Mega Man 2 Memory Game!\r\n                    <p>\r\n                        Click a character, but don't click the same one twice!\r\n                    </p> \r\n                    </Header>\r\n                <div className=\"container\">\r\n                    {this.state.robots.map(robot => (\r\n                        <RobotCard \r\n                            key={robot.id}\r\n                            id={robot.id}\r\n                            alt={robot.name}\r\n                            src={robot.src}\r\n                            handleClick={this.handleClick}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"../src/components/Main/Main\"\n\nclass App extends React.Component {\n\n  render(){\n    return (\n    <Main />\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}